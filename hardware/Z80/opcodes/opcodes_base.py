# autogenerated from opcodes_base.dat, do not edit


from tables import *


class Z80MixinBASE(object):
    def op_00(self):
        """ NOP """
        self.prefix = 0x00
        # NOP
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_01(self):
        """ LD BC,@ """
        self.prefix = 0x01
        # LD
        self.bc = self.read_op16()
        # end
        self.icount -= 10; self.itotal += 10
    
    def op_02(self):
        """ LD (BC),A """
        self.prefix = 0x02
        # LD
        self.write(self.bc, self.a)
        # end
        self.icount -= 7; self.itotal += 7
    
    def op_03(self):
        """ INC BC """
        self.prefix = 0x03
        # INC
        value = self.bc # shortcut
        value = (value + 1) & 0xFFFF
        self.bc = value
        # end
        self.icount -= 6; self.itotal += 6
    
    def op_04(self):
        """ INC B """
        self.prefix = 0x04
        # INC
        value = self.b # shortcut
        value = (value + 1) & 0xFF
        self.f = (self.f & CF) | (VF if value == 0x80 else 0) | (0 if value & 0xF else HF) | SZXY_TABLE[value]
        self.b = value
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_05(self):
        """ DEC B """
        self.prefix = 0x05
        # DEC
        value = self.b # shortcut
        self.f = (self.f & CF) | (0 if value & 0xF else HF) | NF
        value = (value - 1) & 0xFF
        self.f |= (VF if value == 0x7f else 0) | SZXY_TABLE[value]
        self.b = value
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_06(self):
        """ LD B,# """
        self.prefix = 0x06
        # LD
        self.b = self.read_op()
        # end
        self.icount -= 7; self.itotal += 7
    
    def op_07(self):
        """ RLCA """
        self.prefix = 0x07
        # RLCA
        a = self.a # shortcut
        a = ((a << 1) & 0xFF) | ((a >> 7) & 0xFF)
        self.f = (self.f & (PF | ZF | SF)) | (a & (CF | XF | YF))
        self.a = a
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_08(self):
        """ EX AF,AF' """
        self.prefix = 0x08
        # EX
        self.af, self.af1 = self.af1, self.af
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_09(self):
        """ ADD HL,BC """
        self.prefix = 0x09
        # ADD
        hl = self.hl # shortcut
        bc = self.bc # shortcut
        tmp = hl + bc
        lookup = ((hl & 0x0800) >> 11) | ((bc & 0x0800 >> 10) | ((tmp & 0x0800) >> 9)
        self.hl = tmp & 0xFFFF
        self.f = (self.f & (VF | ZF | SF)) | (CF if tmp & 0x10000 else 0) | ((tmp >> 8) & (XF | YF)) | HF_ADD_TABLE[lookup]
        # end
        self.icount -= 11; self.itotal += 11
    
    def op_0A(self):
        """ LD A,(BC) """
        self.prefix = 0x0A
        # LD
        self.a = self.read(self.bc)
        # end
        self.icount -= 7; self.itotal += 7
    
    def op_0B(self):
        """ DEC BC """
        self.prefix = 0x0B
        # DEC
        value = self.bc # shortcut
        value = (value - 1) & 0xFFFF
        self.bc = value
        # end
        self.icount -= 6; self.itotal += 6
    
    def op_0C(self):
        """ INC C """
        self.prefix = 0x0C
        # INC
        value = self.c # shortcut
        value = (value + 1) & 0xFF
        self.f = (self.f & CF) | (VF if value == 0x80 else 0) | (0 if value & 0xF else HF) | SZXY_TABLE[value]
        self.c = value
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_0D(self):
        """ DEC C """
        self.prefix = 0x0D
        # DEC
        value = self.c # shortcut
        self.f = (self.f & CF) | (0 if value & 0xF else HF) | NF
        value = (value - 1) & 0xFF
        self.f |= (VF if value == 0x7f else 0) | SZXY_TABLE[value]
        self.c = value
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_0E(self):
        """ LD C,# """
        self.prefix = 0x0E
        # LD
        self.c = self.read_op()
        # end
        self.icount -= 7; self.itotal += 7
    
    def op_11(self):
        """ LD DE,@ """
        self.prefix = 0x11
        # LD
        self.de = self.read_op16()
        # end
        self.icount -= 10; self.itotal += 10
    
    def op_12(self):
        """ LD (DE),A """
        self.prefix = 0x12
        # LD
        self.write(self.de, self.a)
        # end
        self.icount -= 7; self.itotal += 7
    
    def op_13(self):
        """ INC DE """
        self.prefix = 0x13
        # INC
        value = self.de # shortcut
        value = (value + 1) & 0xFFFF
        self.de = value
        # end
        self.icount -= 6; self.itotal += 6
    
    def op_14(self):
        """ INC D """
        self.prefix = 0x14
        # INC
        value = self.d # shortcut
        value = (value + 1) & 0xFF
        self.f = (self.f & CF) | (VF if value == 0x80 else 0) | (0 if value & 0xF else HF) | SZXY_TABLE[value]
        self.d = value
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_15(self):
        """ DEC D """
        self.prefix = 0x15
        # DEC
        value = self.d # shortcut
        self.f = (self.f & CF) | (0 if value & 0xF else HF) | NF
        value = (value - 1) & 0xFF
        self.f |= (VF if value == 0x7f else 0) | SZXY_TABLE[value]
        self.d = value
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_16(self):
        """ LD D,# """
        self.prefix = 0x16
        # LD
        self.d = self.read_op()
        # end
        self.icount -= 7; self.itotal += 7
    
    def op_19(self):
        """ ADD HL,DE """
        self.prefix = 0x19
        # ADD
        hl = self.hl # shortcut
        de = self.de # shortcut
        tmp = hl + de
        lookup = ((hl & 0x0800) >> 11) | ((de & 0x0800 >> 10) | ((tmp & 0x0800) >> 9)
        self.hl = tmp & 0xFFFF
        self.f = (self.f & (VF | ZF | SF)) | (CF if tmp & 0x10000 else 0) | ((tmp >> 8) & (XF | YF)) | HF_ADD_TABLE[lookup]
        # end
        self.icount -= 11; self.itotal += 11
    
    def op_1A(self):
        """ LD A,(DE) """
        self.prefix = 0x1A
        # LD
        self.a = self.read(self.de)
        # end
        self.icount -= 7; self.itotal += 7
    
    def op_1B(self):
        """ DEC DE """
        self.prefix = 0x1B
        # DEC
        value = self.de # shortcut
        value = (value - 1) & 0xFFFF
        self.de = value
        # end
        self.icount -= 6; self.itotal += 6
    
    def op_1C(self):
        """ INC E """
        self.prefix = 0x1C
        # INC
        value = self.e # shortcut
        value = (value + 1) & 0xFF
        self.f = (self.f & CF) | (VF if value == 0x80 else 0) | (0 if value & 0xF else HF) | SZXY_TABLE[value]
        self.e = value
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_1D(self):
        """ DEC E """
        self.prefix = 0x1D
        # DEC
        value = self.e # shortcut
        self.f = (self.f & CF) | (0 if value & 0xF else HF) | NF
        value = (value - 1) & 0xFF
        self.f |= (VF if value == 0x7f else 0) | SZXY_TABLE[value]
        self.e = value
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_1E(self):
        """ LD E,# """
        self.prefix = 0x1E
        # LD
        self.e = self.read_op()
        # end
        self.icount -= 7; self.itotal += 7
    
    def op_21(self):
        """ LD HL,@ """
        self.prefix = 0x21
        # LD
        self.hl = self.read_op16()
        # end
        self.icount -= 10; self.itotal += 10
    
    def op_22(self):
        """ LD (@),HL """
        self.prefix = 0x22
        # LD
        self.write(self.@, self.hl)
        # end
        self.icount -= 16; self.itotal += 16
    
    def op_23(self):
        """ INC HL """
        self.prefix = 0x23
        # INC
        value = self.hl # shortcut
        value = (value + 1) & 0xFFFF
        self.hl = value
        # end
        self.icount -= 6; self.itotal += 6
    
    def op_24(self):
        """ INC H """
        self.prefix = 0x24
        # INC
        value = self.h # shortcut
        value = (value + 1) & 0xFF
        self.f = (self.f & CF) | (VF if value == 0x80 else 0) | (0 if value & 0xF else HF) | SZXY_TABLE[value]
        self.h = value
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_25(self):
        """ DEC H """
        self.prefix = 0x25
        # DEC
        value = self.h # shortcut
        self.f = (self.f & CF) | (0 if value & 0xF else HF) | NF
        value = (value - 1) & 0xFF
        self.f |= (VF if value == 0x7f else 0) | SZXY_TABLE[value]
        self.h = value
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_26(self):
        """ LD H,# """
        self.prefix = 0x26
        # LD
        self.h = self.read_op()
        # end
        self.icount -= 7; self.itotal += 7
    
    def op_29(self):
        """ ADD HL,HL """
        self.prefix = 0x29
        # ADD
        hl = self.hl # shortcut
        hl = self.hl # shortcut
        tmp = hl + hl
        lookup = ((hl & 0x0800) >> 11) | ((hl & 0x0800 >> 10) | ((tmp & 0x0800) >> 9)
        self.hl = tmp & 0xFFFF
        self.f = (self.f & (VF | ZF | SF)) | (CF if tmp & 0x10000 else 0) | ((tmp >> 8) & (XF | YF)) | HF_ADD_TABLE[lookup]
        # end
        self.icount -= 11; self.itotal += 11
    
    def op_2A(self):
        """ LD HL,(@) """
        self.prefix = 0x2A
        # LD
        self.hl = self.read(self.@)
        # end
        self.icount -= 16; self.itotal += 16
    
    def op_2B(self):
        """ DEC HL """
        self.prefix = 0x2B
        # DEC
        value = self.hl # shortcut
        value = (value - 1) & 0xFFFF
        self.hl = value
        # end
        self.icount -= 6; self.itotal += 6
    
    def op_2C(self):
        """ INC L """
        self.prefix = 0x2C
        # INC
        value = self.l # shortcut
        value = (value + 1) & 0xFF
        self.f = (self.f & CF) | (VF if value == 0x80 else 0) | (0 if value & 0xF else HF) | SZXY_TABLE[value]
        self.l = value
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_2D(self):
        """ DEC L """
        self.prefix = 0x2D
        # DEC
        value = self.l # shortcut
        self.f = (self.f & CF) | (0 if value & 0xF else HF) | NF
        value = (value - 1) & 0xFF
        self.f |= (VF if value == 0x7f else 0) | SZXY_TABLE[value]
        self.l = value
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_2E(self):
        """ LD L,# """
        self.prefix = 0x2E
        # LD
        self.l = self.read_op()
        # end
        self.icount -= 7; self.itotal += 7
    
    def op_31(self):
        """ LD SP,@ """
        self.prefix = 0x31
        # LD
        self.sp = self.read_op16()
        # end
        self.icount -= 10; self.itotal += 10
    
    def op_32(self):
        """ LD (@),A """
        self.prefix = 0x32
        # LD
        self.write(self.@, self.a)
        # end
        self.icount -= 13; self.itotal += 13
    
    def op_33(self):
        """ INC SP """
        self.prefix = 0x33
        # INC
        value = self.sp # shortcut
        value = (value + 1) & 0xFFFF
        self.sp = value
        # end
        self.icount -= 6; self.itotal += 6
    
    def op_34(self):
        """ INC (HL) """
        self.prefix = 0x34
        # INC
        value = self.(hl) # shortcut
        value = (value + 1) & 0xFFFF
        self.(hl) = value
        # end
        self.icount -= 11; self.itotal += 11
    
    def op_35(self):
        """ DEC (HL) """
        self.prefix = 0x35
        # DEC
        value = self.(hl) # shortcut
        value = (value - 1) & 0xFFFF
        self.(hl) = value
        # end
        self.icount -= 11; self.itotal += 11
    
    def op_36(self):
        """ LD (HL),# """
        self.prefix = 0x36
        # LD
        self.write(self.hl, self.read_op())
        # end
        self.icount -= 10; self.itotal += 10
    
    def op_39(self):
        """ ADD HL,SP """
        self.prefix = 0x39
        # ADD
        hl = self.hl # shortcut
        sp = self.sp # shortcut
        tmp = hl + sp
        lookup = ((hl & 0x0800) >> 11) | ((sp & 0x0800 >> 10) | ((tmp & 0x0800) >> 9)
        self.hl = tmp & 0xFFFF
        self.f = (self.f & (VF | ZF | SF)) | (CF if tmp & 0x10000 else 0) | ((tmp >> 8) & (XF | YF)) | HF_ADD_TABLE[lookup]
        # end
        self.icount -= 11; self.itotal += 11
    
    def op_3A(self):
        """ LD A,(@) """
        self.prefix = 0x3A
        # LD
        self.a = self.read(self.@)
        # end
        self.icount -= 13; self.itotal += 13
    
    def op_3B(self):
        """ DEC SP """
        self.prefix = 0x3B
        # DEC
        value = self.sp # shortcut
        value = (value - 1) & 0xFFFF
        self.sp = value
        # end
        self.icount -= 6; self.itotal += 6
    
    def op_3C(self):
        """ INC A """
        self.prefix = 0x3C
        # INC
        value = self.a # shortcut
        value = (value + 1) & 0xFF
        self.f = (self.f & CF) | (VF if value == 0x80 else 0) | (0 if value & 0xF else HF) | SZXY_TABLE[value]
        self.a = value
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_3D(self):
        """ DEC A """
        self.prefix = 0x3D
        # DEC
        value = self.a # shortcut
        self.f = (self.f & CF) | (0 if value & 0xF else HF) | NF
        value = (value - 1) & 0xFF
        self.f |= (VF if value == 0x7f else 0) | SZXY_TABLE[value]
        self.a = value
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_3E(self):
        """ LD A,# """
        self.prefix = 0x3E
        # LD
        self.a = self.read_op()
        # end
        self.icount -= 7; self.itotal += 7
    
    def op_40(self):
        """ LD B,B """
        self.prefix = 0x40
        # LD
        self.b = self.b
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_41(self):
        """ LD B,C """
        self.prefix = 0x41
        # LD
        self.b = self.c
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_42(self):
        """ LD B,D """
        self.prefix = 0x42
        # LD
        self.b = self.d
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_43(self):
        """ LD B,E """
        self.prefix = 0x43
        # LD
        self.b = self.e
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_44(self):
        """ LD B,H """
        self.prefix = 0x44
        # LD
        self.b = self.h
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_45(self):
        """ LD B,L """
        self.prefix = 0x45
        # LD
        self.b = self.l
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_46(self):
        """ LD B,(HL) """
        self.prefix = 0x46
        # LD
        self.b = self.read(self.hl)
        # end
        self.icount -= 7; self.itotal += 7
    
    def op_47(self):
        """ LD B,A """
        self.prefix = 0x47
        # LD
        self.b = self.a
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_48(self):
        """ LD C,B """
        self.prefix = 0x48
        # LD
        self.c = self.b
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_49(self):
        """ LD C,C """
        self.prefix = 0x49
        # LD
        self.c = self.c
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_4A(self):
        """ LD C,D """
        self.prefix = 0x4A
        # LD
        self.c = self.d
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_4B(self):
        """ LD C,E """
        self.prefix = 0x4B
        # LD
        self.c = self.e
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_4C(self):
        """ LD C,H """
        self.prefix = 0x4C
        # LD
        self.c = self.h
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_4D(self):
        """ LD C,L """
        self.prefix = 0x4D
        # LD
        self.c = self.l
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_4E(self):
        """ LD C,(HL) """
        self.prefix = 0x4E
        # LD
        self.c = self.read(self.hl)
        # end
        self.icount -= 7; self.itotal += 7
    
    def op_4F(self):
        """ LD C,A """
        self.prefix = 0x4F
        # LD
        self.c = self.a
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_50(self):
        """ LD D,B """
        self.prefix = 0x50
        # LD
        self.d = self.b
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_51(self):
        """ LD D,C """
        self.prefix = 0x51
        # LD
        self.d = self.c
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_52(self):
        """ LD D,D """
        self.prefix = 0x52
        # LD
        self.d = self.d
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_53(self):
        """ LD D,E """
        self.prefix = 0x53
        # LD
        self.d = self.e
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_54(self):
        """ LD D,H """
        self.prefix = 0x54
        # LD
        self.d = self.h
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_55(self):
        """ LD D,L """
        self.prefix = 0x55
        # LD
        self.d = self.l
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_56(self):
        """ LD D,(HL) """
        self.prefix = 0x56
        # LD
        self.d = self.read(self.hl)
        # end
        self.icount -= 7; self.itotal += 7
    
    def op_57(self):
        """ LD D,A """
        self.prefix = 0x57
        # LD
        self.d = self.a
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_58(self):
        """ LD E,B """
        self.prefix = 0x58
        # LD
        self.e = self.b
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_59(self):
        """ LD E,C """
        self.prefix = 0x59
        # LD
        self.e = self.c
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_5A(self):
        """ LD E,D """
        self.prefix = 0x5A
        # LD
        self.e = self.d
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_5B(self):
        """ LD E,E """
        self.prefix = 0x5B
        # LD
        self.e = self.e
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_5C(self):
        """ LD E,H """
        self.prefix = 0x5C
        # LD
        self.e = self.h
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_5D(self):
        """ LD E,L """
        self.prefix = 0x5D
        # LD
        self.e = self.l
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_5E(self):
        """ LD E,(HL) """
        self.prefix = 0x5E
        # LD
        self.e = self.read(self.hl)
        # end
        self.icount -= 7; self.itotal += 7
    
    def op_5F(self):
        """ LD E,A """
        self.prefix = 0x5F
        # LD
        self.e = self.a
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_60(self):
        """ LD H,B """
        self.prefix = 0x60
        # LD
        self.h = self.b
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_61(self):
        """ LD H,C """
        self.prefix = 0x61
        # LD
        self.h = self.c
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_62(self):
        """ LD H,D """
        self.prefix = 0x62
        # LD
        self.h = self.d
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_63(self):
        """ LD H,E """
        self.prefix = 0x63
        # LD
        self.h = self.e
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_64(self):
        """ LD H,H """
        self.prefix = 0x64
        # LD
        self.h = self.h
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_65(self):
        """ LD H,L """
        self.prefix = 0x65
        # LD
        self.h = self.l
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_66(self):
        """ LD H,(HL) """
        self.prefix = 0x66
        # LD
        self.h = self.read(self.hl)
        # end
        self.icount -= 7; self.itotal += 7
    
    def op_67(self):
        """ LD H,A """
        self.prefix = 0x67
        # LD
        self.h = self.a
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_68(self):
        """ LD L,B """
        self.prefix = 0x68
        # LD
        self.l = self.b
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_69(self):
        """ LD L,C """
        self.prefix = 0x69
        # LD
        self.l = self.c
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_6A(self):
        """ LD L,D """
        self.prefix = 0x6A
        # LD
        self.l = self.d
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_6B(self):
        """ LD L,E """
        self.prefix = 0x6B
        # LD
        self.l = self.e
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_6C(self):
        """ LD L,H """
        self.prefix = 0x6C
        # LD
        self.l = self.h
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_6D(self):
        """ LD L,L """
        self.prefix = 0x6D
        # LD
        self.l = self.l
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_6E(self):
        """ LD L,(HL) """
        self.prefix = 0x6E
        # LD
        self.l = self.read(self.hl)
        # end
        self.icount -= 7; self.itotal += 7
    
    def op_6F(self):
        """ LD L,A """
        self.prefix = 0x6F
        # LD
        self.l = self.a
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_70(self):
        """ LD (HL),B """
        self.prefix = 0x70
        # LD
        self.write(self.hl, self.b)
        # end
        self.icount -= 7; self.itotal += 7
    
    def op_71(self):
        """ LD (HL),C """
        self.prefix = 0x71
        # LD
        self.write(self.hl, self.c)
        # end
        self.icount -= 7; self.itotal += 7
    
    def op_72(self):
        """ LD (HL),D """
        self.prefix = 0x72
        # LD
        self.write(self.hl, self.d)
        # end
        self.icount -= 7; self.itotal += 7
    
    def op_73(self):
        """ LD (HL),E """
        self.prefix = 0x73
        # LD
        self.write(self.hl, self.e)
        # end
        self.icount -= 7; self.itotal += 7
    
    def op_74(self):
        """ LD (HL),H """
        self.prefix = 0x74
        # LD
        self.write(self.hl, self.h)
        # end
        self.icount -= 7; self.itotal += 7
    
    def op_75(self):
        """ LD (HL),L """
        self.prefix = 0x75
        # LD
        self.write(self.hl, self.l)
        # end
        self.icount -= 7; self.itotal += 7
    
    def op_77(self):
        """ LD (HL),A """
        self.prefix = 0x77
        # LD
        self.write(self.hl, self.a)
        # end
        self.icount -= 7; self.itotal += 7
    
    def op_78(self):
        """ LD A,B """
        self.prefix = 0x78
        # LD
        self.a = self.b
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_79(self):
        """ LD A,C """
        self.prefix = 0x79
        # LD
        self.a = self.c
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_7A(self):
        """ LD A,D """
        self.prefix = 0x7A
        # LD
        self.a = self.d
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_7B(self):
        """ LD A,E """
        self.prefix = 0x7B
        # LD
        self.a = self.e
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_7C(self):
        """ LD A,H """
        self.prefix = 0x7C
        # LD
        self.a = self.h
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_7D(self):
        """ LD A,L """
        self.prefix = 0x7D
        # LD
        self.a = self.l
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_7E(self):
        """ LD A,(HL) """
        self.prefix = 0x7E
        # LD
        self.a = self.read(self.hl)
        # end
        self.icount -= 7; self.itotal += 7
    
    def op_7F(self):
        """ LD A,A """
        self.prefix = 0x7F
        # LD
        self.a = self.a
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_80(self):
        """ ADD A,B """
        self.prefix = 0x80
        # ADD
        a = self.a # shortcut
        b = self.b # shortcut
        tmp = a + b
        lookup = ((a & 0x0800) >> 11) | ((b & 0x0800 >> 10) | ((tmp & 0x0800) >> 9)
        self.a = tmp & 0xFFFF
        self.f = (self.f & (VF | ZF | SF)) | (CF if tmp & 0x10000 else 0) | ((tmp >> 8) & (XF | YF)) | HF_ADD_TABLE[lookup]
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_81(self):
        """ ADD A,C """
        self.prefix = 0x81
        # ADD
        a = self.a # shortcut
        c = self.c # shortcut
        tmp = a + c
        lookup = ((a & 0x0800) >> 11) | ((c & 0x0800 >> 10) | ((tmp & 0x0800) >> 9)
        self.a = tmp & 0xFFFF
        self.f = (self.f & (VF | ZF | SF)) | (CF if tmp & 0x10000 else 0) | ((tmp >> 8) & (XF | YF)) | HF_ADD_TABLE[lookup]
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_82(self):
        """ ADD A,D """
        self.prefix = 0x82
        # ADD
        a = self.a # shortcut
        d = self.d # shortcut
        tmp = a + d
        lookup = ((a & 0x0800) >> 11) | ((d & 0x0800 >> 10) | ((tmp & 0x0800) >> 9)
        self.a = tmp & 0xFFFF
        self.f = (self.f & (VF | ZF | SF)) | (CF if tmp & 0x10000 else 0) | ((tmp >> 8) & (XF | YF)) | HF_ADD_TABLE[lookup]
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_83(self):
        """ ADD A,E """
        self.prefix = 0x83
        # ADD
        a = self.a # shortcut
        e = self.e # shortcut
        tmp = a + e
        lookup = ((a & 0x0800) >> 11) | ((e & 0x0800 >> 10) | ((tmp & 0x0800) >> 9)
        self.a = tmp & 0xFFFF
        self.f = (self.f & (VF | ZF | SF)) | (CF if tmp & 0x10000 else 0) | ((tmp >> 8) & (XF | YF)) | HF_ADD_TABLE[lookup]
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_84(self):
        """ ADD A,H """
        self.prefix = 0x84
        # ADD
        a = self.a # shortcut
        h = self.h # shortcut
        tmp = a + h
        lookup = ((a & 0x0800) >> 11) | ((h & 0x0800 >> 10) | ((tmp & 0x0800) >> 9)
        self.a = tmp & 0xFFFF
        self.f = (self.f & (VF | ZF | SF)) | (CF if tmp & 0x10000 else 0) | ((tmp >> 8) & (XF | YF)) | HF_ADD_TABLE[lookup]
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_85(self):
        """ ADD A,L """
        self.prefix = 0x85
        # ADD
        a = self.a # shortcut
        l = self.l # shortcut
        tmp = a + l
        lookup = ((a & 0x0800) >> 11) | ((l & 0x0800 >> 10) | ((tmp & 0x0800) >> 9)
        self.a = tmp & 0xFFFF
        self.f = (self.f & (VF | ZF | SF)) | (CF if tmp & 0x10000 else 0) | ((tmp >> 8) & (XF | YF)) | HF_ADD_TABLE[lookup]
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_86(self):
        """ ADD A,(HL) """
        self.prefix = 0x86
        # ADD
        a = self.a # shortcut
        (hl) = self.(hl) # shortcut
        tmp = a + (hl)
        lookup = ((a & 0x0800) >> 11) | (((hl) & 0x0800 >> 10) | ((tmp & 0x0800) >> 9)
        self.a = tmp & 0xFFFF
        self.f = (self.f & (VF | ZF | SF)) | (CF if tmp & 0x10000 else 0) | ((tmp >> 8) & (XF | YF)) | HF_ADD_TABLE[lookup]
        # end
        self.icount -= 7; self.itotal += 7
    
    def op_87(self):
        """ ADD A,A """
        self.prefix = 0x87
        # ADD
        a = self.a # shortcut
        a = self.a # shortcut
        tmp = a + a
        lookup = ((a & 0x0800) >> 11) | ((a & 0x0800 >> 10) | ((tmp & 0x0800) >> 9)
        self.a = tmp & 0xFFFF
        self.f = (self.f & (VF | ZF | SF)) | (CF if tmp & 0x10000 else 0) | ((tmp >> 8) & (XF | YF)) | HF_ADD_TABLE[lookup]
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_A0(self):
        """ AND B """
        self.prefix = 0xA0
        # AND
        self.a &= self.b
        self.f = HF | SZXY_TABLE[value]
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_A1(self):
        """ AND C """
        self.prefix = 0xA1
        # AND
        self.a &= self.c
        self.f = HF | SZXY_TABLE[value]
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_A2(self):
        """ AND D """
        self.prefix = 0xA2
        # AND
        self.a &= self.d
        self.f = HF | SZXY_TABLE[value]
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_A3(self):
        """ AND E """
        self.prefix = 0xA3
        # AND
        self.a &= self.e
        self.f = HF | SZXY_TABLE[value]
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_A4(self):
        """ AND H """
        self.prefix = 0xA4
        # AND
        self.a &= self.h
        self.f = HF | SZXY_TABLE[value]
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_A5(self):
        """ AND L """
        self.prefix = 0xA5
        # AND
        self.a &= self.l
        self.f = HF | SZXY_TABLE[value]
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_A6(self):
        """ AND (HL) """
        self.prefix = 0xA6
        # AND
        self.a &= self.read(self.hl)
        self.f = HF | SZXY_TABLE[value]
        # end
        self.icount -= 7; self.itotal += 7
    
    def op_A7(self):
        """ AND A """
        self.prefix = 0xA7
        # AND
        self.a &= self.a
        self.f = HF | SZXY_TABLE[value]
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_C6(self):
        """ ADD A,# """
        self.prefix = 0xC6
        # ADD
        a = self.a # shortcut
        # = self.# # shortcut
        tmp = a + #
        lookup = ((a & 0x0800) >> 11) | ((# & 0x0800 >> 10) | ((tmp & 0x0800) >> 9)
        self.a = tmp & 0xFFFF
        self.f = (self.f & (VF | ZF | SF)) | (CF if tmp & 0x10000 else 0) | ((tmp >> 8) & (XF | YF)) | HF_ADD_TABLE[lookup]
        # end
        self.icount -= 7; self.itotal += 7
    
    def op_E3(self):
        """ EX (SP),HL """
        self.prefix = 0xE3
        # EX
        self.(sp), self.hl = self.hl, self.(sp)
        # end
        self.icount -= 19; self.itotal += 19
    
    def op_E6(self):
        """ AND # """
        self.prefix = 0xE6
        # AND
        self.a &= self.read_op()
        self.f = HF | SZXY_TABLE[value]
        # end
        self.icount -= 7; self.itotal += 7
    
    def op_EB(self):
        """ EX DE,HL """
        self.prefix = 0xEB
        # EX
        self.de, self.hl = self.hl, self.de
        # end
        self.icount -= 4; self.itotal += 4
    
    def op_F9(self):
        """ LD SP,HL """
        self.prefix = 0xF9
        # LD
        self.sp = self.hl
        # end
        self.icount -= 6; self.itotal += 6
    
    def _init_base(self):
        """ init tables """
            self._base = (
                self.op_00, # NOP
                self.op_01, # LD BC,@
                self.op_02, # LD (BC),A
                self.op_03, # INC BC
                self.op_04, # INC B
                self.op_05, # DEC B
                self.op_06, # LD B,#
                self.op_07, # RLCA
                self.op_08, # EX AF,AF'
                self.op_09, # ADD HL,BC
                self.op_0A, # LD A,(BC)
                self.op_0B, # DEC BC
                self.op_0C, # INC C
                self.op_0D, # DEC C
                self.op_0E, # LD C,#
                self.op_0F, # RRCA
                self.op_10, # DJNZ %
                self.op_11, # LD DE,@
                self.op_12, # LD (DE),A
                self.op_13, # INC DE
                self.op_14, # INC D
                self.op_15, # DEC D
                self.op_16, # LD D,#
                self.op_17, # RLA
                self.op_18, # JR %
                self.op_19, # ADD HL,DE
                self.op_1A, # LD A,(DE)
                self.op_1B, # DEC DE
                self.op_1C, # INC E
                self.op_1D, # DEC E
                self.op_1E, # LD E,#
                self.op_1F, # RRA
                self.op_20, # JR NZ,%
                self.op_21, # LD HL,@
                self.op_22, # LD (@),HL
                self.op_23, # INC HL
                self.op_24, # INC H
                self.op_25, # DEC H
                self.op_26, # LD H,#
                self.op_27, # DAA
                self.op_28, # JR Z,%
                self.op_29, # ADD HL,HL
                self.op_2A, # LD HL,(@)
                self.op_2B, # DEC HL
                self.op_2C, # INC L
                self.op_2D, # DEC L
                self.op_2E, # LD L,#
                self.op_2F, # CPL
                self.op_30, # JR NC,%
                self.op_31, # LD SP,@
                self.op_32, # LD (@),A
                self.op_33, # INC SP
                self.op_34, # INC (HL)
                self.op_35, # DEC (HL)
                self.op_36, # LD (HL),#
                self.op_37, # SCF
                self.op_38, # JR C,%
                self.op_39, # ADD HL,SP
                self.op_3A, # LD A,(@)
                self.op_3B, # DEC SP
                self.op_3C, # INC A
                self.op_3D, # DEC A
                self.op_3E, # LD A,#
                self.op_3F, # CCF
                self.op_40, # LD B,B
                self.op_41, # LD B,C
                self.op_42, # LD B,D
                self.op_43, # LD B,E
                self.op_44, # LD B,H
                self.op_45, # LD B,L
                self.op_46, # LD B,(HL)
                self.op_47, # LD B,A
                self.op_48, # LD C,B
                self.op_49, # LD C,C
                self.op_4A, # LD C,D
                self.op_4B, # LD C,E
                self.op_4C, # LD C,H
                self.op_4D, # LD C,L
                self.op_4E, # LD C,(HL)
                self.op_4F, # LD C,A
                self.op_50, # LD D,B
                self.op_51, # LD D,C
                self.op_52, # LD D,D
                self.op_53, # LD D,E
                self.op_54, # LD D,H
                self.op_55, # LD D,L
                self.op_56, # LD D,(HL)
                self.op_57, # LD D,A
                self.op_58, # LD E,B
                self.op_59, # LD E,C
                self.op_5A, # LD E,D
                self.op_5B, # LD E,E
                self.op_5C, # LD E,H
                self.op_5D, # LD E,L
                self.op_5E, # LD E,(HL)
                self.op_5F, # LD E,A
                self.op_60, # LD H,B
                self.op_61, # LD H,C
                self.op_62, # LD H,D
                self.op_63, # LD H,E
                self.op_64, # LD H,H
                self.op_65, # LD H,L
                self.op_66, # LD H,(HL)
                self.op_67, # LD H,A
                self.op_68, # LD L,B
                self.op_69, # LD L,C
                self.op_6A, # LD L,D
                self.op_6B, # LD L,E
                self.op_6C, # LD L,H
                self.op_6D, # LD L,L
                self.op_6E, # LD L,(HL)
                self.op_6F, # LD L,A
                self.op_70, # LD (HL),B
                self.op_71, # LD (HL),C
                self.op_72, # LD (HL),D
                self.op_73, # LD (HL),E
                self.op_74, # LD (HL),H
                self.op_75, # LD (HL),L
                self.op_76, # HALT
                self.op_77, # LD (HL),A
                self.op_78, # LD A,B
                self.op_79, # LD A,C
                self.op_7A, # LD A,D
                self.op_7B, # LD A,E
                self.op_7C, # LD A,H
                self.op_7D, # LD A,L
                self.op_7E, # LD A,(HL)
                self.op_7F, # LD A,A
                self.op_80, # ADD A,B
                self.op_81, # ADD A,C
                self.op_82, # ADD A,D
                self.op_83, # ADD A,E
                self.op_84, # ADD A,H
                self.op_85, # ADD A,L
                self.op_86, # ADD A,(HL)
                self.op_87, # ADD A,A
                self.op_88, # ADC A,B
                self.op_89, # ADC A,C
                self.op_8A, # ADC A,D
                self.op_8B, # ADC A,E
                self.op_8C, # ADC A,H
                self.op_8D, # ADC A,L
                self.op_8E, # ADC A,(HL)
                self.op_8F, # ADC A,A
                self.op_90, # SUB B
                self.op_91, # SUB C
                self.op_92, # SUB D
                self.op_93, # SUB E
                self.op_94, # SUB H
                self.op_95, # SUB L
                self.op_96, # SUB (HL)
                self.op_97, # SUB A
                self.op_98, # SBC A,B
                self.op_99, # SBC A,C
                self.op_9A, # SBC A,D
                self.op_9B, # SBC A,E
                self.op_9C, # SBC A,H
                self.op_9D, # SBC A,L
                self.op_9E, # SBC A,(HL)
                self.op_9F, # SBC A,A
                self.op_A0, # AND B
                self.op_A1, # AND C
                self.op_A2, # AND D
                self.op_A3, # AND E
                self.op_A4, # AND H
                self.op_A5, # AND L
                self.op_A6, # AND (HL)
                self.op_A7, # AND A
                self.op_A8, # XOR B
                self.op_A9, # XOR C
                self.op_AA, # XOR D
                self.op_AB, # XOR E
                self.op_AC, # XOR H
                self.op_AD, # XOR L
                self.op_AE, # XOR (HL)
                self.op_AF, # XOR A
                self.op_B0, # OR B
                self.op_B1, # OR C
                self.op_B2, # OR D
                self.op_B3, # OR E
                self.op_B4, # OR H
                self.op_B5, # OR L
                self.op_B6, # OR (HL)
                self.op_B7, # OR A
                self.op_B8, # CP B
                self.op_B9, # CP C
                self.op_BA, # CP D
                self.op_BB, # CP E
                self.op_BC, # CP H
                self.op_BD, # CP L
                self.op_BE, # CP (HL)
                self.op_BF, # CP A
                self.op_C0, # RET NZ
                self.op_C1, # POP BC
                self.op_C2, # JP NZ,@
                self.op_C3, # JP @
                self.op_C4, # CALL NZ,@
                self.op_C5, # PUSH BC
                self.op_C6, # ADD A,#
                self.op_C7, # RST 0x00
                self.op_C8, # RET Z
                self.op_C9, # RET
                self.op_CA, # JP Z,@
                self.op_CB, # shift CB
                self.op_CC, # CALL Z,@
                self.op_CD, # CALL @
                self.op_CE, # ADC A,#
                self.op_CF, # RST 0x08
                self.op_D0, # RET NC
                self.op_D1, # POP DE
                self.op_D2, # JP NC,@
                self.op_D3, # OUT (#),A
                self.op_D4, # CALL NC,@
                self.op_D5, # PUSH DE
                self.op_D6, # SUB #
                self.op_D7, # RST 0x10
                self.op_D8, # RET C
                self.op_D9, # EXX
                self.op_DA, # JP C,@
                self.op_DB, # IN A,(#)
                self.op_DC, # CALL C,@
                self.op_DD, # shift DD
                self.op_DE, # SBC A,#
                self.op_DF, # RST 0x18
                self.op_E0, # RET PO
                self.op_E1, # POP HL
                self.op_E2, # JP PO,@
                self.op_E3, # EX (SP),HL
                self.op_E4, # CALL PO,@
                self.op_E5, # PUSH HL
                self.op_E6, # AND #
                self.op_E7, # RST 0x20
                self.op_E8, # RET PE
                self.op_E9, # JP HL
                self.op_EA, # JP PE,@
                self.op_EB, # EX DE,HL
                self.op_EC, # CALL PE,@
                self.op_ED, # shift ED
                self.op_EE, # XOR #
                self.op_EF, # RST 0x28
                self.op_F0, # RET P
                self.op_F1, # POP AF
                self.op_F2, # JP P,@
                self.op_F3, # DI
                self.op_F4, # CALL P,@
                self.op_F5, # PUSH AF
                self.op_F6, # OR #
                self.op_F7, # RST 0x30
                self.op_F8, # RET M
                self.op_F9, # LD SP,HL
                self.op_FA, # JP M,@
                self.op_FB, # EI
                self.op_FC, # CALL M,@
                self.op_FD, # shift FD
                self.op_FE, # CP #
                self.op_FF, # RST 0x38
            ) # base
